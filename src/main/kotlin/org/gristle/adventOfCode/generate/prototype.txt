package org.gristle.adventOfCode.y[[YEAR]].d[[DAY]]

import org.gristle.adventOfCode.utilities.*

class Y[[YEAR]]D[[DAY]](input: String) {

    private val lines = input.lines().map { line ->
        line
    }
    private val nestedLines = input.blankSplit().map { chunk ->
        chunk.lines().map { line ->
            line
        }
    }
    private val pattern = Regex("""""")

    private val parsed = input
        .groupValues(pattern)

    override fun part1() = parsed

    override fun part2() = parsed
}

fun main() {
    val timer = Stopwatch(start = true)
    val input = getInput([[DAY]], [[YEAR]])
    val testInput = listOf("""""")
    val solver = Y[[YEAR]]D[[DAY]](input)
    println("Class creation: ${timer.lap()}ms")
    println("\tPart 1: ${solver.part1()} (${timer.lap()}ms)") // 
    println("\tPart 2: ${solver.part2()} (${timer.lap()}ms)") // 
    println("Total time: ${timer.elapsed()}ms")
}